package io.takamaka.code.engine.internal.transactions;

import io.hotmoka.beans.references.Classpath;
import io.hotmoka.beans.references.TransactionReference;
import io.hotmoka.beans.responses.TransactionResponse;
import io.takamaka.code.engine.LRUCache;
import io.takamaka.code.engine.internal.EngineClassLoader;

/**
 * An object that is able to cache successive creations of a class loader.
 */
public abstract class AbstractNodeWithCache {

	/**
	 * The cache.
	 */
	private final LRUCache<Classpath, EngineClassLoader> cache = new LRUCache<>(100, 1000);

	/**
	 * Yields a cached class loader for the given class path, or
	 * creates one if it has never been created before.
	 * 
	 * @param the classpath from where the class loader will load classes
	 * @return the class loader
	 * @throws Exception if the class loader cannot be created
	 */
	protected final EngineClassLoader getCachedClassLoader(Classpath classpath) throws Exception {
		EngineClassLoader result = cache.get(classpath);
		if (result == null) {
			result = new EngineClassLoader(classpath, this);
			cache.put(classpath, result);
		}

		return result;
	}

	/**
	 * Yields the response generated by the transaction with the given reference.
	 * 
	 * @param transactionReference the reference to the transaction
	 * @return the response
	 * @throws Exception if the response cannot be found
	 */
	public abstract TransactionResponse getResponseAt(TransactionReference transactionReference) throws Exception;
}