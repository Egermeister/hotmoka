package io.takamaka.code.engine.internal.transactions;

import java.util.NoSuchElementException;

import io.hotmoka.beans.TransactionRejectedException;
import io.hotmoka.beans.references.TransactionReference;
import io.hotmoka.beans.responses.TransactionResponse;
import io.takamaka.code.engine.LRUCache;
import io.takamaka.code.engine.internal.EngineClassLoader;

/**
 * An object that is able to cache successive creations of a class loader.
 */
public abstract class AbstractNodeWithCache {

	/**
	 * The cache.
	 */
	private final LRUCache<TransactionReference, EngineClassLoader> cache = new LRUCache<>(100, 1000);

	/**
	 * Yields the response generated by the transaction with the given reference.
	 * 
	 * @param reference the reference of the transaction
	 * @return the response
	 * @throws TransactionRejectedException if there is a request for that transaction but it failed with this exception
	 * @throws NoSuchElementException if there is no request, and hence no response, with that reference
	 */
	protected final EngineClassLoader getCachedClassLoader(TransactionReference classpath) throws Exception {
		return cache.computeIfAbsent(classpath, _classpath -> new EngineClassLoader(_classpath, this));
	}

	/**
	 * Yields the response generated by the transaction with the given reference, even
	 * before the transaction gets committed. It is guaranteed that the transaction has been
	 * already successfully delivered.
	 * 
	 * @param reference the reference of the transaction
	 * @return the response
	 */
	public abstract TransactionResponse getResponseUncommittedAt(TransactionReference reference) throws TransactionRejectedException, NoSuchElementException;

	/**
	 * Determines if this node is initialized, that is, a (possibly still uncommitted)
	 * initialization transaction has been run already on this node.
	 * 
	 * @return true if and only if that condition holds
	 */
	protected abstract boolean isInitialized();
}