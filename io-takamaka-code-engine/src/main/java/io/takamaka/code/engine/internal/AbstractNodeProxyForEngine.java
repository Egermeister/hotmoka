package io.takamaka.code.engine.internal;

import io.hotmoka.beans.references.TransactionReference;
import io.hotmoka.beans.responses.TransactionResponse;
import io.takamaka.code.engine.internal.transactions.AbstractNodeProxyForTransactions;

/**
 * The methods of an abstract node that are only used inside this package.
 * By using this proxy class, we avoid to define them as public.
 */
public abstract class AbstractNodeProxyForEngine extends AbstractNodeProxyForTransactions {

	/**
	 * Yields the response generated by the transaction with the given reference, even
	 * before the transaction gets committed. It is guaranteed that the transaction has been
	 * already successfully delivered.
	 * 
	 * @param reference the reference of the transaction
	 * @return the response
	 */
	protected abstract TransactionResponse getResponseUncommittedAt(TransactionReference reference);

	@Override
	protected final EngineClassLoader mkClassLoader(TransactionReference classpath) throws Exception {
		return new EngineClassLoader(classpath, this);
	}
}