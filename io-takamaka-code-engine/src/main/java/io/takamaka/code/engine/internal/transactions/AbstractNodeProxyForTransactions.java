package io.takamaka.code.engine.internal.transactions;

import java.util.NoSuchElementException;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import io.hotmoka.beans.TransactionRejectedException;
import io.hotmoka.beans.references.TransactionReference;
import io.hotmoka.nodes.Node;
import io.takamaka.code.engine.LRUCache;
import io.takamaka.code.engine.Store;
import io.takamaka.code.engine.internal.EngineClassLoader;

/**
 * The methods of an abstract node that are only used inside this package.
 * By using this proxy class, we avoid to define them as public.
 */
public abstract class AbstractNodeProxyForTransactions implements Node {

	/**
	 * The cache.
	 */
	private final LRUCache<TransactionReference, EngineClassLoader> cache = new LRUCache<>(100, 1000);

	/**
	 * An executor for short background tasks.
	 */
	private final ExecutorService executor = Executors.newCachedThreadPool();

	@Override
	public void close() throws Exception {
		executor.shutdown();
		executor.awaitTermination(10, TimeUnit.SECONDS);
		Store<?> store = getStore();
		if (store != null)
			store.close();
	}

	/**
	 * Yields the response generated by the transaction with the given reference.
	 * 
	 * @param reference the reference of the transaction
	 * @return the response
	 * @throws TransactionRejectedException if there is a request for that transaction but it failed with this exception
	 * @throws NoSuchElementException if there is no request, and hence no response, with that reference
	 */
	protected final EngineClassLoader getCachedClassLoader(TransactionReference classpath) throws Exception {
		return cache.computeIfAbsent(classpath, this::mkClassLoader);
	}

	/**
	 * Yields the UTC time that must be used for a transaction, if it is executed
	 * with this node in this moment.
	 * 
	 * @return the UTC time, as returned by {@link java.lang.System#currentTimeMillis()}
	 */
	protected abstract long getNow();

	/**
	 * Yields the state of this node.
	 * 
	 * @return the state
	 */
	protected abstract Store<?> getStore();

	/**
	 * Creates a new class loader for the given class path.
	 * 
	 * @param classpath the class path
	 * @return the class loader
	 * @throws Exception if the class loader cannot be created
	 */
	protected abstract EngineClassLoader mkClassLoader(TransactionReference classpath) throws Exception;

	/**
	 * Runs the given task with the executor service of this node.
	 * 
	 * @param <T> the type of the result of the task
	 * @param task the task
	 * @return the value computed by the task
	 */
	protected final <T> Future<T> submit(Callable<T> task) {
		return executor.submit(task);
	}

	/**
	 * Runs the given task with the executor service of this node.
	 * 
	 * @param task the task
	 */
	protected final void submit(Runnable task) {
		executor.submit(task);
	}
}