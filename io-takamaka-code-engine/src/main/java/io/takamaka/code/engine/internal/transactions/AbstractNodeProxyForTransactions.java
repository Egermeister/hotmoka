package io.takamaka.code.engine.internal.transactions;

import java.math.BigInteger;
import java.util.NoSuchElementException;
import java.util.function.Consumer;

import io.hotmoka.beans.TransactionRejectedException;
import io.hotmoka.beans.references.TransactionReference;
import io.hotmoka.beans.signatures.FieldSignature;
import io.hotmoka.beans.updates.UpdateOfField;
import io.hotmoka.beans.values.StorageReference;
import io.hotmoka.nodes.Node;
import io.takamaka.code.engine.LRUCache;
import io.takamaka.code.engine.internal.EngineClassLoader;

/**
 * The methods of an abstract node that are only used inside this package.
 * By using this proxy class, we avoid to define them as public.
 */
public abstract class AbstractNodeProxyForTransactions implements Node {

	/**
	 * The cache.
	 */
	private final LRUCache<TransactionReference, EngineClassLoader> cache = new LRUCache<>(100, 1000);

	/**
	 * Yields the response generated by the transaction with the given reference.
	 * 
	 * @param reference the reference of the transaction
	 * @return the response
	 * @throws TransactionRejectedException if there is a request for that transaction but it failed with this exception
	 * @throws NoSuchElementException if there is no request, and hence no response, with that reference
	 */
	protected final EngineClassLoader getCachedClassLoader(TransactionReference classpath) throws Exception {
		return cache.computeIfAbsent(classpath, this::mkClassLoader);
	}

	/**
	 * Yields the UTC time that must be used for a transaction, if it is executed
	 * with this node in this moment.
	 * 
	 * @return the UTC time, as returned by {@link java.lang.System#currentTimeMillis()}
	 */
	protected abstract long getNow();

	/**
	 * Yields the manifest installed in the store of the node, also when the node has a notion
	 * of commit and the installation of the manifest has not yet been committed.
	 * The manifest is an object of type {@code io.takamaka.code.system.Manifest} that contains
	 * some information about the node, useful for the users of the node.
	 * 
	 * @return the reference to the node
	 * @throws NoSuchElementException if no manifest has been set for this node
	 */
	protected abstract StorageReference getManifestUncommitted() throws NoSuchElementException;

	/**
	 * Creates a new class loader for the given class path.
	 * 
	 * @param classpath the class path
	 * @return the class loader
	 * @throws Exception if the class loader cannot be created
	 */
	protected abstract EngineClassLoader mkClassLoader(TransactionReference classpath) throws Exception;

	/**
	 * Determines if this node is initialized, that is, a (possibly still uncommitted)
	 * initialization transaction has been run already on this node.
	 * 
	 * @return true if and only if that condition holds
	 */
	protected abstract boolean isInitialized();

	/**
	 * Yields the most recent update for the given non-{@code final} field,
	 * of lazy type, of the object with the given storage reference.
	 * 
	 * @param storageReference the storage reference
	 * @param field the field whose update is being looked for
	 * @param chargeForCPU a function called to charge CPU costs
	 * @return the update
	 */
	protected abstract UpdateOfField getLastLazyUpdateToNonFinalField(StorageReference storageReference, FieldSignature field, Consumer<BigInteger> chargeForCPU);

	/**
	 * Yields the most recent update for the given {@code final} field,
	 * of lazy type, of the object with the given storage reference.
	 * Its implementation can be identical to
	 * that of {@link #getLastLazyUpdateToNonFinalField(StorageReference, FieldSignature, Consumer)},
	 * or instead exploit the fact that the field is {@code final}, for an optimized look-up.
	 * 
	 * @param storageReference the storage reference
	 * @param field the field whose update is being looked for
	 * @param chargeForCPU a function called to charge CPU costs
	 * @return the update
	 */
	protected abstract UpdateOfField getLastLazyUpdateToFinalField(StorageReference object, FieldSignature field, Consumer<BigInteger> chargeForCPU);
}