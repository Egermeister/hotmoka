#!/bin/bash

MAX_GAS_PER_VIEW=${MAX_GAS_PER_VIEW:-10000000}
TIMEOUT_COMMIT=${TIMEOUT_COMMIT:-5}
NETWORK_URL=${NETWORK_URL:=panarea.hotmoka.io}
BASE_NETWORK_URL=$(echo $NETWORK_URL | sed s/":.*"/""/g) # remove trailing port, if any

echo
echo "Starting a Tendermint Hotmoka node connected to the node at $NETWORK_URL:"
echo "  MAX_GAS_PER_VIEW=$MAX_GAS_PER_VIEW"
echo "  NETWORK_URL=$NETWORK_URL"
echo "  BASE_NETWORK_URL=$BASE_NETWORK_URL"
echo "  TIMEOUT_COMMIT=$TIMEOUT_COMMIT"

# extract information about the remote node, that are needed in order to prepare
# the Tendermint configuration of the local node
REMOTE_NODE_ID=$(curl --silent http://$NETWORK_URL/get/nodeID| python3 -c "import sys, json; print(json.load(sys.stdin)['ID'])")
echo "  REMOTE_NODE_ID=$REMOTE_NODE_ID"
MANIFEST_TRANSACTION=$(curl --silent http://$NETWORK_URL/get/manifest| python3 -c "import sys, json; print(json.load(sys.stdin)['transaction']['hash'])")
MANIFEST_PROGRESSIVE=$(curl --silent http://$NETWORK_URL/get/manifest| python3 -c "import sys, json; print(json.load(sys.stdin)['progressive'])")
MANIFEST=$MANIFEST_TRANSACTION#$MANIFEST_PROGRESSIVE
echo "  MANIFEST=$MANIFEST"
CHAIN_ID=$(moka-no-logs call $MANIFEST getChainId --url=$NETWORK_URL --print-costs=false --use-colors=false)
echo "  CHAIN_ID=$CHAIN_ID"
GENESIS_TIME=$(moka-no-logs call $MANIFEST getGenesisTime --url=$NETWORK_URL --print-costs=false --use-colors=false)
echo "  GENESIS_TIME=$GENESIS_TIME"
INITIAL_VALIDATORS=$(moka-no-logs call $MANIFEST getInitialValidators --url=$NETWORK_URL --print-costs=false --use-colors=false)
echo "  INITIAL_VALIDATORS=$INITIAL_VALIDATORS"
SHARES=$(moka-no-logs call $INITIAL_VALIDATORS getShares --url=$NETWORK_URL --print-costs=false --use-colors=false --class-of-receiver io.takamaka.code.dao.SharedEntityView)
echo "  SHARES=$SHARES"
NUM_INITIAL_VALIDATORS=$(moka-no-logs call $SHARES size --url=$NETWORK_URL --print-costs=false --use-colors=false --class-of-receiver io.takamaka.code.util.StorageMapView)
echo "  NUM_INITIAL_VALIDATORS=$NUM_INITIAL_VALIDATORS"

# extract information about each single initial validator, that goes into the Tendermint genesis file of the local node
for (( i=0; i<$NUM_INITIAL_VALIDATORS; i++ ))
do
	INITIAL_VALIDATOR=$(moka-no-logs call $SHARES select $i --url=$NETWORK_URL --print-costs=false --use-colors=false --class-of-receiver io.takamaka.code.util.StorageMapView)
	echo "    INITIAL_VALIDATOR #$i=$INITIAL_VALIDATOR"
	ID=$(moka-no-logs call $INITIAL_VALIDATOR id --url=$NETWORK_URL --print-costs=false --use-colors=false --class-of-receiver io.takamaka.code.governance.Validator)
	echo "    ID OF INITIAL_VALIDATOR #$i=$ID"
	PUBLIC_KEY=$(moka-no-logs call $INITIAL_VALIDATOR publicKey --url=$NETWORK_URL --print-costs=false --use-colors=false --class-of-receiver io.takamaka.code.lang.ExternallyOwnedAccount)
	echo "    PUBLIC KEY OF INITIAL_VALIDATOR #$i=$PUBLIC_KEY"
	POWER=$(moka-no-logs call $SHARES get $INITIAL_VALIDATOR --url=$NETWORK_URL --print-costs=false --use-colors=false --class-of-receiver io.takamaka.code.util.StorageMapView)
	echo "    POWER OF INITIAL_VALIDATOR #$i=$POWER"
	
	# the JSON that goes into the Tendermint genesis file of the local node
	JSON='    {
      "address": "'$ID'",
      "pub_key": {
        "type": "tendermint/PubKeyEd25519",
        "value": "'$PUBLIC_KEY'"
      },
      "power": "'$POWER'",
      "name": "'$ID'"
    }'

	# merge the JSON of each single initial validator into a unique, comma-separated JSON string
    if [ -z "$INITIAL_VALIDATORS_JSON" ]
	then
        INITIAL_VALIDATORS_JSON=$JSON
	else
		INITIAL_VALIDATORS_JSON="${INITIAL_VALIDATORS_JSON}"$',\n'"${JSON}"
	fi
done

INITIAL_VALIDATORS_JSON=$'\n'"${INITIAL_VALIDATORS_JSON}"$'\n  '

echo "    INITIAL_VALIDATORS_JSON=$INITIAL_VALIDATORS_JSON"

# create an initial Tendermint configuration, that later will be modified for our needs
tendermint testnet --v 0 --n 1 --o . >> /dev/null

# set the chain id as in the remote node
sed -i '/"chain_id": /s/".*"/"chain_id": "'$CHAIN_ID'"/' node0/config/genesis.json

# set the genesis time as in the remote node
sed -i '/"genesis_time": /s/".*"/"genesis_time": "'$GENESIS_TIME'"/' node0/config/genesis.json

# set the initial validators as in the remote node
awk -v r=\"validators\":\ ["${INITIAL_VALIDATORS_JSON}"] '{gsub(/"validators": \[\]/,r)}1' node0/config/genesis.json > genesis.json
mv genesis.json node0/config/genesis.json

# disable the creation of empty blocks
sed -i "s/create_empty_blocks = true/create_empty_blocks = false/g" node0/config/config.toml

# set the timeout for commits
sed -i '/timeout_commit = /s/".*"/"'${TIMEOUT_COMMIT}s'"/' node0/config/config.toml

# set the remote node as persistent seed
sed -i '/persistent_peers =/s/".*"/"'$REMOTE_NODE_ID@$BASE_NETWORK_URL:26656'"/' node0/config/config.toml

# invoke moka in a way that deletes the tendermint configuration that was initially
# created into node0, so that we do not leave garbage around;
# in any case, it has been copied inside the chain directory
moka start-tendermint --interactive=false --tendermint-config=node0 --delete-tendermint-config --max-gas-per-view ${MAX_GAS_PER_VIEW}