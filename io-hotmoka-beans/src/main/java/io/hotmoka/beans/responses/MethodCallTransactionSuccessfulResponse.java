package io.hotmoka.beans.responses;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import io.hotmoka.beans.GasCostModel;
import io.hotmoka.beans.MarshallingContext;
import io.hotmoka.beans.annotations.Immutable;
import io.hotmoka.beans.updates.Update;
import io.hotmoka.beans.values.StorageReference;
import io.hotmoka.beans.values.StorageValue;

/**
 * A response for a successful transaction that calls a method
 * in blockchain. The method has been called without problems and
 * without generating exceptions. The method does not return {@code void}.
 */
@Immutable
public class MethodCallTransactionSuccessfulResponse extends MethodCallTransactionResponse implements TransactionResponseWithEvents {
	final static byte SELECTOR = 9;
	final static byte SELECTOR_NO_EVENTS_NO_SELF_CHARGED = 10;

	/**
	 * The return value of the method.
	 */
	public final StorageValue result;

	/**
	 * The events generated by this transaction.
	 */
	private final StorageReference[] events;

	/**
	 * Builds the transaction response.
	 * 
	 * @param result the value returned by the method
	 * @param selfCharged true if and only if the called method was annotated as {@code @@SelfCharged}, hence the
	 *                    execution was charged to its receiver
	 * @param updates the updates resulting from the execution of the transaction
	 * @param events the events resulting from the execution of the transaction
	 * @param gasConsumedForCPU the amount of gas consumed by the transaction for CPU execution
	 * @param gasConsumedForRAM the amount of gas consumed by the transaction for RAM allocation
	 * @param gasConsumedForStorage the amount of gas consumed by the transaction for storage consumption
	 */
	public MethodCallTransactionSuccessfulResponse(StorageValue result, boolean selfCharged, Stream<Update> updates, Stream<StorageReference> events, BigInteger gasConsumedForCPU, BigInteger gasConsumedForRAM, BigInteger gasConsumedForStorage) {
		super(selfCharged, updates, gasConsumedForCPU, gasConsumedForRAM, gasConsumedForStorage);

		this.events = events.toArray(StorageReference[]::new);
		this.result = result;
	}

	@Override
	public boolean equals(Object other) {
		if (other instanceof MethodCallTransactionSuccessfulResponse) {
			MethodCallTransactionSuccessfulResponse otherCast = (MethodCallTransactionSuccessfulResponse) other;
			return super.equals(other) && result.equals(otherCast.result) && Arrays.equals(events, otherCast.events);
		}
		else
			return false;
	}

	@Override
	public int hashCode() {
		return super.hashCode() ^ Arrays.hashCode(events) ^ result.hashCode();
	}

	@Override
	public String toString() {
        return super.toString() + "\n"
        	+ "  returned value: " + result + "\n"
        	+ "  events:\n" + getEvents().map(StorageReference::toString).collect(Collectors.joining("\n    ", "    ", ""));
	}

	@Override
	public Stream<StorageReference> getEvents() {
		return Stream.of(events);
	}

	@Override
	public StorageValue getOutcome() {
		return result;
	}

	@Override
	public BigInteger size(GasCostModel gasCostModel) {
		return super.size(gasCostModel).add(result.size(gasCostModel))
			.add(getEvents().map(event -> event.size(gasCostModel)).reduce(BigInteger.ZERO, BigInteger::add));
	}

	@Override
	public void into(MarshallingContext context) throws IOException {
		boolean optimized = events.length == 0 && !selfCharged;
		context.oos.writeByte(optimized ? SELECTOR_NO_EVENTS_NO_SELF_CHARGED : SELECTOR);
		super.into(context);
		result.into(context);

		if (!optimized) {
			context.oos.writeBoolean(selfCharged);
			intoArrayWithoutSelector(events, context);
		}
	}

	/**
	 * Factory method that unmarshals a response from the given stream.
	 * The selector of the response has been already processed.
	 * 
	 * @param ois the stream
	 * @param selector the selector
	 * @return the request
	 * @throws IOException if the response could not be unmarshalled
	 * @throws ClassNotFoundException if the response could not be unmarshalled
	 */
	public static MethodCallTransactionSuccessfulResponse from(ObjectInputStream ois, byte selector) throws IOException, ClassNotFoundException {
		Stream<Update> updates = Stream.of(unmarshallingOfArray(Update::from, Update[]::new, ois));
		BigInteger gasConsumedForCPU = unmarshallBigInteger(ois);
		BigInteger gasConsumedForRAM = unmarshallBigInteger(ois);
		BigInteger gasConsumedForStorage = unmarshallBigInteger(ois);
		StorageValue result = StorageValue.from(ois);
		Stream<StorageReference> events;
		boolean selfCharged;

		if (selector == SELECTOR) {
			selfCharged = ois.readBoolean();
			events = Stream.of(unmarshallingOfArray(StorageReference::from, StorageReference[]::new, ois));
		}
		else if (selector == SELECTOR_NO_EVENTS_NO_SELF_CHARGED) {
			selfCharged = false;
			events = Stream.empty();
		}
		else
			throw new IOException("unexpected response selector: " + selector);

		return new MethodCallTransactionSuccessfulResponse(result, selfCharged, updates, events, gasConsumedForCPU, gasConsumedForRAM, gasConsumedForStorage);
	}
}