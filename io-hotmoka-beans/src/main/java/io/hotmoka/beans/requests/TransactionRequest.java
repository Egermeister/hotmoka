package io.hotmoka.beans.requests;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.nio.charset.StandardCharsets;
import java.security.NoSuchAlgorithmException;

import io.hotmoka.beans.InternalFailureException;
import io.hotmoka.beans.Marshallable;
import io.hotmoka.beans.annotations.Immutable;
import io.hotmoka.beans.references.LocalTransactionReference;
import io.hotmoka.beans.references.TransactionReference;
import io.hotmoka.beans.responses.TransactionResponse;
import io.hotmoka.crypto.HashingAlgorithm;

/**
 * A request of a transaction.
 * 
 * @param <R> the type of the response expected for this request
 */
@Immutable
public abstract class TransactionRequest<R extends TransactionResponse> extends Marshallable {

	/**
	 * Used to marshal requests that are specific to a node.
	 * After this selector, the qualified name of the request must follow.
	 */
	protected final static byte EXPANSION_SELECTOR = 12;

	/**
	 * The hashing algorithm for the requests.
	 */
	public final static HashingAlgorithm<? super TransactionRequest<?>> hashingForRequests;

	static {
		try {
			hashingForRequests = HashingAlgorithm.sha256(Marshallable::toByteArray);
		}
		catch (NoSuchAlgorithmException e) {
			throw new InternalFailureException("the hashing algorithm for the requests is not available");
		}
	}

	/**
	 * Factory method that unmarshals a request from the given stream.
	 * 
	 * @param ois the stream
	 * @return the request
	 * @throws IOException if the request could not be unmarshalled
	 * @throws ClassNotFoundException if the request could not be unmarshalled
	 */
	public static TransactionRequest<?> from(ObjectInputStream ois) throws IOException, ClassNotFoundException {
		byte selector = ois.readByte();
		switch (selector) {
		case ConstructorCallTransactionRequest.SELECTOR: return ConstructorCallTransactionRequest.from(ois);
		case InitializationTransactionRequest.SELECTOR: return InitializationTransactionRequest.from(ois);
		case InstanceMethodCallTransactionRequest.SELECTOR:
		case InstanceMethodCallTransactionRequest.SELECTOR_TRANSFER_INT:
		case InstanceMethodCallTransactionRequest.SELECTOR_TRANSFER_LONG:
		case InstanceMethodCallTransactionRequest.SELECTOR_TRANSFER_BIG_INTEGER:
			return InstanceMethodCallTransactionRequest.from(ois, selector);
		case JarStoreInitialTransactionRequest.SELECTOR: return JarStoreInitialTransactionRequest.from(ois);
		case JarStoreTransactionRequest.SELECTOR: return JarStoreTransactionRequest.from(ois);
		case GameteCreationTransactionRequest.SELECTOR: return GameteCreationTransactionRequest.from(ois);
		case StaticMethodCallTransactionRequest.SELECTOR: return StaticMethodCallTransactionRequest.from(ois);
		case InstanceSystemMethodCallTransactionRequest.SELECTOR: return InstanceSystemMethodCallTransactionRequest.from(ois);
		case EXPANSION_SELECTOR: {
			// this case deals with requests that only exist in a specific type of node;
			// hence their fully-qualified name must be available after the expansion selector

			String className = ois.readUTF();
			Class<?> clazz = Class.forName(className, false, ClassLoader.getSystemClassLoader());

			// only subclass of TransactionRequest are considered, to block potential call injections
			if (!TransactionRequest.class.isAssignableFrom(clazz))
				throw new IOException("unknown request class " + className);

			Method from;
			try {
				from = clazz.getMethod("from", ObjectInputStream.class);
			}
			catch (NoSuchMethodException | SecurityException e) {
				throw new IOException("cannot find method " + className + ".from(ObjectInputStream)");
			}

			try {
				return (TransactionRequest<?>) from.invoke(null, ois);
			}
			catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
				throw new IOException("cannot call method " + className + ".from(ObjectInputStream)");
			}
		}
		default: throw new IOException("unexpected request selector: " + selector);
		}
	}

	/**
	 * Yields the reference to the transaction generated by this request.
	 * 
	 * @return the transaction reference
	 */
	public final TransactionReference getReference() {
		return new LocalTransactionReference(bytesToHex(hashingForRequests.hash(this)));
	}

	/**
	 * Translates an array of bytes into a hexadecimal string.
	 * 
	 * @param bytes the bytes
	 * @return the string
	 */
	private static String bytesToHex(byte[] bytes) {
	    byte[] hexChars = new byte[bytes.length * 2];
	    int pos = 0;
	    for (byte b: bytes) {
	        int v = b & 0xFF;
	        hexChars[pos++] = HEX_ARRAY[v >>> 4];
	        hexChars[pos++] = HEX_ARRAY[v & 0x0F];
	    }
	
	    return new String(hexChars, StandardCharsets.UTF_8);
	}

	/**
	 * The string of the hexadecimal digits.
	 */
	private final static String HEX_CHARS = "0123456789abcdef";

	/**
	 * The array of hexadecimal digits.
	 */
	private final static byte[] HEX_ARRAY = HEX_CHARS.getBytes();

	/**
	 * Unmarshals the signature from the given stream.
	 * 
	 * @param ois the stream
	 * @return the signature
	 * @throws IOException if the signature could not be unmarshalled
	 */
	protected final static byte[] unmarshallSignature(ObjectInputStream ois) throws IOException {
		int signatureLength = readLength(ois);
		byte[] signature = new byte[signatureLength];
		if (signatureLength != ois.readNBytes(signature, 0, signatureLength))
			throw new IOException("signature length mismatch in request");

		return signature;
	}
}